" Turn on line numbers
set number
autocmd BufNewFile,BufRead * set number

set nomodeline

" Indent *.feature, *.xml, etc. files by 2 spaces, anything else by 4
function! SetIndentation()
    if empty(matchstr(expand('%'), '\.\(feature\|xml\|xsd\|xsl\|html\|htm\|svg\|css\|tex\)$'))
        set tabstop=4 shiftwidth=4
    else
        set tabstop=2 shiftwidth=2
    endif
endfunction
autocmd BufNewFile,BufRead * call SetIndentation()

" Scroll horizontally one character at a time
set sidescroll=1

" When wrapping is turned on, add some visual aid to continuation lines
set showbreak=\ \->\ 

" Automatic indentation
set autoindent
set smartindent

" Search while typing pattern
set incsearch

" Highlight search pattern matches
set hlsearch

" Always keep 5 lines visible on the top and the bottom when scrolling
set scrolloff=5

" Automatically format doxygen style comments
set comments=sl:/**,mb:\ *,elx:\ */

" Insert comment leader when hitting enter in insert mode
set formatoptions+=r

" Insert comment leader when hitting o in normal mode
set formatoptions+=o

" Font name for gVim
set guifont=Monaco\ 11

" Show current line and column numbers
set ruler

" Command line is 2 lines, so it's easier to type complex commands
set cmdheight=2

" Hide everything from GUI
set guioptions=''

" Highlight syntax
syntax on

" Some nice colorscheme
colorscheme evening
if has('gui_running')
    colorscheme koehler
endif

" Make constants readable on projector as well
highlight Constant ctermbg=black ctermfg=green

" Display the TDD state machine -- useful for screencasts
let g:TDDState=0
let g:TDDStates=['', '   FAIL  ', '   PASS  ', ' REFACTOR']

highlight User1 ctermbg=black ctermfg=green

function! FormatTDDState()
    if g:TDDState == 0
        return ''
    endif

    return g:TDDStates[g:TDDState]
endfunction

function! AdvanceTDDState()
    let g:TDDState=g:TDDState+1

    if g:TDDState == 4
        let g:TDDState=1
    endif

    if g:TDDState == 1
        highlight User1 ctermbg=black ctermfg=red
    elseif g:TDDState == 2
        highlight User1 ctermbg=black ctermfg=green
    elseif g:TDDState == 3
        highlight User1 ctermbg=black ctermfg=blue
    endif
endfunction

" Pressing F10 advances the TDD state to the next
noremap <F10> :call AdvanceTDDState()<CR>

" Always show status line
set laststatus=2

" Statusline
"   current time
set statusline=%{strftime(\"%I:%M\")}
"   FAIL or OK depending on last shell cmd
set statusline+=\ \(%{v:shell_error?\"FAIL:\":\"ok:\"}
"   exit code of last shell command
set statusline+=\%{v:shell_error}\)
"   modified flag
set statusline+=\%m
"   last 22 chars of file name
set statusline+=\ \%-.22F
"   file type
set statusline+=%-y
"   left-right separator
set statusline+=%=
" character encoding
set statusline+=%{strlen(&fenc)?&fenc:&enc}
"   last operator
set statusline+=\ \[%{v:operator}\]
"   current line and column
set statusline+=\ %5.l,%-3.c
"   ASCII code of current char
set statusline+=x%02.B
"   scroll position percentage
set statusline+=\ %3.p%%
" TDD state
set statusline+=%1*%{FormatTDDState()}

" Always highlight tabs and trailing spaces.
set list
set listchars=tab:>\ ,trail:.,nbsp:.

" Always assume Unix-style line endings
set fileformats=unix

" Trailing spaces to be highlighted in red.
highlight WhitespaceEOL term=reverse ctermbg=Red guibg=Red
match WhitespaceEOL /\s\+$/

" Make frequent typos work.
command! Q :q
command! Qall :qall
command! QAll :qall
command! W :w
command! Wq :wq
command! WQ :wq
command! Wqall :wqall
command! WQall :wqall
command! WQAll :wqall

if !has('gui_running')
    " Pressing K will invoke vim_lookup_docs.sh in the PATH with the current
    " filename and the word under the cursor. That script may attempt to open
    " relevant docs according to the given arguments. Mine guesses file type
    " by it's extension and either looks up the given word in various offline
    " documentation or uses Google depending on file type.
    nnoremap K :!vim_lookup_docs.sh "%" "<cword>"<CR><CR>

    " Pressing F2 will show the complete git history of the file
    nnoremap <F2> :!clear; vim_git.sh log "%"<CR><CR>

    " Pressing F3 will search the git repository for the word under the cursor.
    nnoremap <F3> :!clear; vim_git.sh grep "%" "<cword>"<CR><CR>

    " Pressing F5 will invoke a bash shell and return to the window right after.
    nnoremap <F5> :! clear; PROMPT_EXTRA='[V]' bash<CR><CR>
endif

" Pressing F4 will attempt to git-blame the line under the cursor.
command! GitBlame :echo system('vim_git.sh blame '''.expand('%').''' '.line('.'))
nnoremap <F4> :GitBlame<CR>

function! OpenAll(command, pattern_to_position_cursor)
    for f in split(system(a:command .  ' 2>/dev/null | grep -Ev ''[.](swp|pyc|pickle)$'''), "\n")
        execute 'tabe ' . f
        if a:pattern_to_position_cursor!=''
            execute '/' . a:pattern_to_position_cursor
            nohl
        endif
    endfor
endfunction

" The command :Grep pattern will open all the files matching pattern
" in a case sensitive manner
function! Grep(pattern)
    call OpenAll('grep -Rlm1 -- ''' . a:pattern . ''' *', a:pattern)
endfunction
command! -nargs=1 Grep call Grep('<args>')
command! -nargs=1 G call Grep('<args>')
command! -nargs=0 GrepCurrentWord call Grep(expand('<cword>'))
command! -nargs=0 GCW call Grep(expand('<cword>'))

" Press F6 to open all files containing the word under the cursor
nnoremap <F6> :call Grep(expand('<cword>'))<CR>

" The command :GitGrep pattern will open all the files in a git repository
" matching pattern in a case sensitive manner
function! GitGrep(pattern)
    call OpenAll('git grep -l -- ''' . a:pattern . ''' *', a:pattern)
endfunction
command! -nargs=1 GitGrep call GitGrep('<args>')
command! -nargs=1 GG call GitGrep('<args>')
command! -nargs=0 GitGrepCurrentWord call GitGrep(expand('<cword>'))
command! -nargs=0 GGCW call GitGrep(expand('<cword>'))

" The command :Find d*f.txt will open all the files matching the given path,
" in a case insensitive manner, e.g. 'dir/File.txt', in a new tab.
function! Find(pattern)
    call OpenAll('find -L * -ipath ''*' . a:pattern . '''', '')
endfunction
command! -nargs=1 Find call Find('<args>')
command! -nargs=1 F call Find('<args>')
command! -nargs=0 FindCurrentWord call Find(expand('<cword>'))
command! -nargs=0 FCW call Find(expand('<cword>'))

" Press F7 to find a file by path and name matching
nnoremap <F7> :Find 

" The command :FindClass Name will open all the files matching 'class Name'
" or 'interface Name' in a case insensitive manner
function! FindClass(pattern)
    let l:pattern = '\(^\|[^a-zA-Z0-9_]\)\(\(class\)\|\(interface\)\)\s\s*' . a:pattern . '\([^a-zA-Z0-9_]\|$\)'
    call OpenAll('grep -Rilm1 ''' . l:pattern . ''' *', l:pattern)
endfunction
command! -nargs=1 FindClass call FindClass('<args>')
command! -nargs=1 FC call FindClass('<args>')
command! -nargs=0 FindClassCurrentWord call FindClass(expand('<cword>'))
command! -nargs=0 FCCW call FindClass(expand('<cword>'))

" The command :GitFindClass Name will open all the files matching 'class Name'
" or 'interface Name' in a git repository in a case insensitive manner
function! GitFindClass(pattern)
    let l:pattern = '\(^\|[^a-zA-Z0-9_]\)\(\(class\)\|\(interface\)\)\s\s*' . a:pattern . '\([^a-zA-Z0-9_]\|$\)'
    call OpenAll('git grep -il ''' . l:pattern . ''' *', l:pattern)
endfunction
command! -nargs=1 GitFindClass call GitFindClass('<args>')
command! -nargs=1 GFC call GitFindClass('<args>')
command! -nargs=0 GitFindClassCurrentWord call GitFindClass(expand('<cword>'))
command! -nargs=0 GFCCW call GitFindClass(expand('<cword>'))

" Pressing F8 will turn off search highlighting and reset syntax highlighting
nnoremap <F8> :nohl<CR>:syntax sync fromstart<CR>

" Pressing F9 will attempt to invoke unit tests through a shell script named
" vim_run_tests.sh and open the output in a new window in case of failure.
function! RunTests()
    !clear; vim_run_tests.sh '%' /tmp/__test_output
    if shell_error!=0
        14split + /tmp/__test_output
        hi StatusLine ctermfg=darkred ctermbg=white guibg=darkred guifg=white
    else
        hi StatusLine ctermfg=darkgreen ctermbg=black guibg=darkgreen guifg=black
    endif
endfunction
nnoremap <F9> <Esc> :call RunTests() <CR><CR>

" Pressing F11 will interactively build a git commit
nnoremap <F11> :!clear ; vim_git.sh commit_selection "%"<CR><CR>

" Pressing F12 will commit everything into git
nnoremap <F12> :!clear ; vim_git.sh commit_all "%"<CR><CR>

" Highlight current line of cursor
highlight CursorLine term=underline cterm=underline
set cursorline!

" Ctrl+o will open explorer in a new tab
nnoremap <C-o> :Texplore<CR>

" Set default view mode for explorer to tree
let g:netrw_liststyle=3

" Make explorer hide Vim's swap files
let g:netrw_list_hide='.*\.swp$'

" Pressing 't' will jump to the next search pattern match and bring it to the
" center
nnoremap t nzz
" Pressing 'T' will jump to the last search pattern match and bring it to the
" center
nnoremap T Nzz

" Cut, copy and paste between Vim and system clipboard
vnoremap <C-c> <CR>"+y
vnoremap <C-x> <CR>"+d
inoremap <C-v> <Esc>:set paste<CR>"+p:set nopaste<CR>i

" Comment/Uncomment lines of code when pressing Ctrl+E or Ctrl+U
autocmd BufEnter *                              let b:cmt_leader = '# '
autocmd BufEnter *                              let b:cmt_tail = ''
autocmd BufEnter *.c,*.h                        let b:cmt_leader = '/* '
autocmd BufEnter *.c,*.h                        let b:cmt_tail = ' */'
autocmd BufEnter *.cpp,*.hpp,*                  let b:cmt_leader = '// '
autocmd BufEnter *.css                          let b:cmt_leader = '/* '
autocmd BufEnter *.css                          let b:cmt_tail = ' */'
autocmd BufEnter *.htm,*.html                   let b:cmt_leader = '<!-- '
autocmd BufEnter *.htm,*.html                   let b:cmt_tail = ' -->'
autocmd BufEnter *.java                         let b:cmt_leader = '// '
autocmd BufEnter *.jsfx                         let b:cmt_leader = '// '
autocmd BufEnter *.js                           let b:cmt_leader = '// '
autocmd BufEnter *.mail                         let b:cmt_leader = '> '
autocmd BufEnter *.php                          let b:cmt_leader = '// '
autocmd BufEnter *.py,*.python                  let b:cmt_leader = '# '
autocmd BufEnter *.ruby                         let b:cmt_leader = '# '
autocmd BufEnter *.sh                           let b:cmt_leader = '# '
autocmd BufEnter *.svg                          let b:cmt_leader = '<!-- '
autocmd BufEnter *.svg                          let b:cmt_tail = ' -->'
autocmd BufEnter *.tex                          let b:cmt_leader = '% '
autocmd BufEnter *.tpl                          let b:cmt_leader = '<!-- '
autocmd BufEnter *.tpl                          let b:cmt_tail = ' -->'
autocmd BufEnter *.vim,.vimrc,vimrc             let b:cmt_leader = '" '
autocmd BufEnter *.xml                          let b:cmt_leader = '<!-- '
autocmd BufEnter *.xml                          let b:cmt_tail = ' -->'
noremap <silent> <C-E> :<C-B>silent <C-E>s/^\( *\)\([^ ].*\)$/\1<C-R>=escape(b:cmt_leader,'\/')<CR>\2<C-R>=escape(b:cmt_tail,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> <C-U> :<C-B>silent <C-E>s/^\( *\)<C-R>=escape(b:cmt_leader,'\/*')<CR>\(.*\)<C-R>=escape(b:cmt_tail,'\/*')<CR>$/\1\2/e<CR>:nohlsearch<CR>

" Use .vim_tags as a tagfile to offer suggestions when pressing Ctrl+P.
" Requires vim_ctags.sh to be on PATH.
set tags=./.vim_tags;/
command! Ctags silent! !vim_ctags.sh ".vim_tags" "%" &
autocmd BufWritePost *.c,*.cpp,*.cc,*.h,*.hpp,*.hh,*.php* Ctags
autocmd BufWritePost *.js,*.java,*.py,*.pl,*.rb,*.cs,*.sh Ctags
Ctags

" Map usual tag shortcuts to use tabs
map <C-]> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <C-t> :tabprevious<CR>

" Turn on auto-wrapping for text files and display a margin
function! ToggleWrapping()
    if 0 != len(matchstr(expand('%'), '\(COMMIT_\)\|\(mail\.\)\|\(\.mail\)\|\(\.rst\)'))
        set textwidth=72
        set colorcolumn=73
    elseif 0 != len(matchstr(expand('%'), '\.\(txt\|md\)$'))
        set textwidth=79
        set colorcolumn=80
        " turn off automatic comment leaders
        set formatoptions=tq
    else
        set textwidth=0
        set colorcolumn=81
    endif
endfunction
autocmd BufNewFile,BufRead * call ToggleWrapping()

" Additional rules to turn on syntax highlighting for various file types
autocmd BufNewFile,BufRead *.jsfx set filetype=javascript
autocmd BufNewFile,BufRead *.md set filetype=markdown
autocmd BufNewFile,BufRead *.tpl,*.twig set filetype=htmldjango
autocmd BufNewFile,BufRead *.rst set filetype=rst

" Use tabs in Makefiles, go files, TSV files, etc. and spaces in anything
" else for indentation
function! ToggleTabExpansion()
    let l:pattern = '\(^\|/\)\(\([Mm]akefile\(\.am\)\?\)\|\(debian/rules\)\|\(.*\.go\)\|\(.*\.tsv\)\)$'
    if empty(matchstr(expand('%'), l:pattern))
        set expandtab
    else
        set noexpandtab
    endif
endfunction
autocmd BufNewFile,BufRead * call ToggleTabExpansion()

" Attempt to locate the step definition for the .feature step under the
" cursor inside a git repository.
function! GitFindStep()
    if empty(matchstr(expand('%'), '[.]feature$'))
        return
    endif

    let l:blacklist = ["first [^ ]*", "second [^ ]*", "third [^ ]*", "fourth [^ ]*", "fifth [^ ]*", "seventh [^ ]*", "eighth [^ ]*", "ninth [^ ]*", "last [^ ]*"]
    let l:line = getline('.')
    let l:pattern_wo_nonalpha = substitute(l:line, "[^a-zA-Z_ \"-]\\+", "[^ ]*", "g")
    let l:pattern_w_prefix = substitute(l:pattern_wo_nonalpha, "^ *[A-Za-z]* ", "^[^a-zA-Z0-9_-]*@[a-zA-Z]*[^a-zA-Z]*", "")
    let l:pattern_wo_short_words = substitute(l:pattern_w_prefix, "\\([^a-zA-Z_-]\\)[a-zA-Z_-]\\{1,3\\}\\( \\|$\\)", "\\1[^ ]*\\2", "g")
    let l:pattern_wo_params = substitute(l:pattern_wo_short_words, "\"[^\"]*\"", ".*", "g")
    let l:pattern_wo_blacklisted_words = substitute(l:pattern_wo_params, "\\(" . join(l:blacklist, "\\)\\|\\(") . "\\)", "[^ ]* [^ ]*", "g")
    call GitGrep(l:pattern_wo_blacklisted_words)
endfunction

" Pressing Ctrl+i attempts to find the step definition to the .feature
" step under the cursor inside a git repository.
noremap <C-i> :call GitFindStep()<CR>

" :w!! will save the file as root
cmap w!! w !sudo tee % >/dev/null

function! HighlightTrailingComma()
    " Trailing commas to be highlighted in Python, in order to avoid
    " typo tuples:
    "
    "     def foo(x):
    "         return x + 1,

    highlight TrailingComma term=reverse ctermbg=Blue guibg=Blue
    match TrailingComma /,\+$/
endfunction
autocmd BufEnter *.py call HighlightTrailingComma()

function! HighlightAllDots()
    " All dots to be highlighted in JavaScript, in order to avoid typos like
    " this:
    "
    "     (function () {
    "
    "         'use strict';
    "
    "         function foo(a, b)
    "         {
    "             console.log([a ? 1 : 0, b ? 1 : 0]);
    "         }
    "
    "         foo(true, true);      // Array [ 1, 1 ]
    "         foo(false, false);    // Array [ 0, 0 ]
    "         foo(true. false);     // Array [ 0, 0 ]
    "         foo(false. true);     // Array [ 0, 0 ]
    "
    "    })();

    highlight AllDots term=reverse ctermbg=Blue guibg=Blue
    match AllDots /\.\+/
endfunction
autocmd BufEnter *.js call HighlightAllDots()
